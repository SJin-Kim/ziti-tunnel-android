name: Build Tunnel Native Libraries Only

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'tunnel/src/main/cpp/**'
      - 'tunnel/CMakeLists.txt'
      - 'tunnel/build.gradle.kts'

jobs:
  build-native-libs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Setup Android NDK
      shell: bash
      run: |
        ndk_ver=$(awk -F=' ' '/^ndk =/{ gsub(/"/, ""); print $2}' gradle/libs.versions.toml)
        echo "using NDK version = $ndk_ver"
        echo "ANDROID_NDK_ROOT=${ANDROID_SDK_ROOT}/ndk/$ndk_ver" >> ${GITHUB_ENV}

    - name: Setup vcpkg
      shell: bash
      run: |
        git clone https://github.com/microsoft/vcpkg.git $HOME/vcpkg
        $HOME/vcpkg/bootstrap-vcpkg.sh
        echo "VCPKG_ROOT=$HOME/vcpkg" >> ${GITHUB_ENV}

    - name: Setup build environment
      shell: bash
      run: |
        CI_CACHE=${GITHUB_WORKSPACE}/.ci_cache
        VCPKG_BINARY_SOURCES="clear;files,${CI_CACHE},readwrite"
        mkdir -p ${CI_CACHE}
        echo "CI_CACHE=${CI_CACHE}" >> ${GITHUB_ENV}
        echo "VCPKG_BINARY_SOURCES=${VCPKG_BINARY_SOURCES}" >> ${GITHUB_ENV}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.CI_CACHE }}
          tunnel/build/cmake
        key: tunnel-deps-${{ hashFiles('tunnel/vcpkg.json') }}
        restore-keys: |
          tunnel-deps-

    - name: Build Tunnel Native Libraries
      shell: bash
      run: |
        cd tunnel

        # Build native dependencies and tunnel library for all architectures
        for triplet in arm-android arm64-android x86-android x64-android; do
          echo "Building for $triplet..."
          cmake --preset $triplet
          cmake --build --preset $triplet
        done

    - name: Collect .so files
      shell: bash
      run: |
        mkdir -p native-libs/armeabi-v7a
        mkdir -p native-libs/arm64-v8a
        mkdir -p native-libs/x86
        mkdir -p native-libs/x86_64

        # Search for all .so files in tunnel directory
        echo "Searching for .so files..."
        find tunnel -name "*.so" -type f

        # Copy built .so files to organized directory
        find tunnel -name "*.so" -type f | while read so_file; do
          echo "Found: $so_file"

          # Determine architecture from path
          if [[ "$so_file" == *"arm-android"* ]] || [[ "$so_file" == *"arm-neon"* ]] || [[ "$so_file" == *"armeabi"* ]]; then
            cp "$so_file" native-libs/armeabi-v7a/
            echo "  -> Copied to armeabi-v7a/"
          elif [[ "$so_file" == *"arm64-android"* ]] || [[ "$so_file" == *"arm64-v8a"* ]]; then
            cp "$so_file" native-libs/arm64-v8a/
            echo "  -> Copied to arm64-v8a/"
          elif [[ "$so_file" == *"x86-android"* ]] && [[ "$so_file" != *"x86_64"* ]]; then
            cp "$so_file" native-libs/x86/
            echo "  -> Copied to x86/"
          elif [[ "$so_file" == *"x64-android"* ]] || [[ "$so_file" == *"x86_64"* ]]; then
            cp "$so_file" native-libs/x86_64/
            echo "  -> Copied to x86_64/"
          fi
        done

        # Show what we collected
        echo "Collected native libraries:"
        find native-libs -type f -name "*.so" -exec ls -lh {} \;

        # Exit with error if no .so files found
        if [ -z "$(find native-libs -type f -name "*.so")" ]; then
          echo "ERROR: No .so files were collected!"
          exit 1
        fi

    - name: Upload Native Libraries
      uses: actions/upload-artifact@v4
      with:
        name: ziti-tunnel-native-libs
        path: native-libs/
        retention-days: 30
