
/*
 * Copyright (c) 2020 NetFoundry. All rights reserved.
 */

plugins {
    alias(libs.plugins.android.app)
    alias(libs.plugins.kotlin.android)
}


def getCommitHash = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'log', '-1', '--format=%h'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null
    }
}

def getVersionCode =  { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine("git", "rev-list", "--first-parent", "--count", "origin/main")
        standardOutput = stdout
    }
    return Integer.parseInt(stdout.toString().trim())
}

def gitHash = getCommitHash()
def gitBranch = getVersionName()
version = getVersionName()

android {
    namespace = "org.openziti.mobile"
    signingConfigs {
        release {
            keyAlias 'ziti1'
            keyPassword System.getenv('RELEASE_KEYSTORE_PASSWORD')
            storeFile file(System.getenv('RELEASE_KEYSTORE') ?: "not found")
            storePassword System.getenv('RELEASE_KEYSTORE_PASSWORD')
        }
    }

    compileSdk = 35

    defaultConfig {
        applicationId "org.openziti.mobile"
        minSdkVersion 28
        targetSdkVersion 35
        versionCode getVersionCode()
        versionName "${project.version}"

        buildConfigField "String", "GIT_COMMIT", "\"${gitHash}\""
        buildConfigField "String", "GIT_BRANCH", "\"${gitBranch}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    lint {
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
}

dependencies {
    implementation fileTree(include: ["*.jar"], dir: "libs")
    implementation(project(":tunnel"))

    implementation(libs.kotlinx.serialization.json)
    implementation(libs.datastore.prefs)

    implementation(libs.kotlin)
    implementation(libs.coroutines.android)

    implementation(libs.material)
    implementation(libs.constraintlayout)

    implementation(libs.zxing.android.embedded)

    implementation(libs.lifecycle.extensions)
    implementation(libs.appcompat)
    implementation(libs.lifecycle.livedata.ktx)
    implementation(libs.lifecycle.viewmodel.ktx)
    implementation(libs.fragment.ktx)
}
